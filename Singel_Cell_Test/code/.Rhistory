geom_point(aes(HP_final$`Mean Air Temperature (c)`,HP_final$HP_Interception,col="HP Modele (Dry Snow), RMSE = 56.82"),size=2.2)+
ggtitle("Modeled Interception") + xlab("Temp C") + ylab ("Interception (mm)")+
theme_cowplot(12)+
theme(legend.position = c(0.025, 0.85))+
labs(col = "")
ggplotly(ggplot(data=filter(final_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_Interception,col="Modeled Interception"))+
ggtitle("Calabrated HP Model Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
theme_cowplot(12))+
theme(legend.position = "none")
################################################################################################
# Andreadis et al. (2009) Snow Inteception Model, using the storm data from the ForEST Data Set
#
# This code aims to recreate the model results from Storck (2009) and compare the
# result to a measured canopy interception efficenty (CIE) explained in Roth & Nolin (2019)
#
#
# Code written by Mikey Johnson, mikeyj@nevada.unr.edu
#
# last eddited November 11, 2019
#
#
###############################################################################################
# Loading Pakages
library(lubridate)  # date time manipulation
library(dplyr)      # data manipulation
library(ggplot2)    # plotting
library(cowplot)    # publication-ready plots
library(plotly)     # interactive plotting
library(hydroGOF)   # Hydrology Analysis, rmse
###############################################################################################
# Loading data from ForEST_snowdepth_data_clean.R
# I am assuming data is sorted by site and date
daily_storm_data <- read.csv("~/Documents/R Scripts/McKenzie Canopy Interception Model/ForEST data & code/Saved Data From Each Step/Step4_daily_storm_data.csv", row.names=1)
# cleaning names
names(daily_storm_data) <- c("Site",
"Date",
"Wind Speed (m/s)",
"Wind Direction (Deg)",
"Relative Humidity (%)",
"Mean Air Temperature (c)",
"Max Air Temperature (c)",
"Min Air Temperature (c)",
"Snow Depth (cm)",
"Depth Increas (cm)",
"New Snow Density (kg/m3)",
"sprec open (mm)",
"Storm Flag",
"stormfall intensity (mm/hr)",
"stormfall duration (hr)",
"sprec forest (mm)",
"Canopy Interception (mm)",
"CIE",
"CIE flag")
daily_storm_data <- filter(daily_storm_data,`Canopy Interception (mm)`<= 1500) #filtering really high points, I don't beleve these value to be true
daily_storm_data <- filter(daily_storm_data,`CIE flag`== 0) #filtering only my good data for now
###############################################################################################################
#Hedstorm Pameroy Model (1998)
# LAI for the High, Med, and Low sites
LAI <- c(1.1, 2.7, 2.4)
daily_storm_data <- daily_storm_data %>%
mutate(LAI = ifelse(Site == "High",LAI[1],
ifelse(Site == "Mid",LAI[2],
ifelse(Site == "Low",LAI[3],NA))))
# constants
S_bar <- 6.6  # 6.6 pine, 5.9 spruce (kg/m^2)
cc <- 1 # canopy closure coeficent (orignal vlaue 1)
snow_unloading_multiplier <- 0.679 # (orignal value 0.679)
# Max Snow Load
# I_max <- S_bar*(0.27+(46/rho_snow))*LAI #HP max canopy load
# I_HP <- 0.679 * I_max * (1-exp(-cc*P/I_max))
# Simulated_CIE
daily_storm_data <- daily_storm_data %>%
mutate(HP_rho = 67.92+51.25*exp(`Mean Air Temperature (c)`/2.59)) %>%
mutate(HP_I_max = S_bar*(0.27+(46/HP_rho))*LAI*1000) %>%
mutate(HP_Interception = snow_unloading_multiplier * HP_I_max * (1-exp(-cc * `sprec open (mm)` / HP_I_max)))
###############################################################################################################
# Uncalabrated Plot
ggplot(data=filter(daily_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_Interception,col="Modeled Interception"))+
ggtitle("Uncalibrated HP Model, Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
theme_cowplot(12)+
theme(legend.position = "none")
filter(daily_storm_data, Site == "Mid" ) %>% summarise(rmse(HP_Interception, `Canopy Interception (mm)`))
###############################################################################################################
# Model Performance Table
Model_Preformance <- data.frame(Site=c("High","Mid","Low","Total"),cc_orignal=c(1,1,1,1),SUM_orignal=c(0.679,0.679,0.679,0.679)) %>%
mutate(RMSE_original=c(filter(daily_storm_data, Site == "High" ) %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)),
filter(daily_storm_data, Site == "Mid" ) %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)),
filter(daily_storm_data, Site == "Low" ) %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)),
daily_storm_data %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)))) %>%
mutate(cc_calibrated=NA) %>%
mutate(SUM_calibrated=NA) %>%
mutate(RMSE_calibrated=NA)
###############################################################################################################
# Calibration, the canopy cover and snow unloading parameter "cc" and "SUM"
# runif(1000,0.1,.99)
cc_SUM_calibration <- function(data1=daily_storm_data,site="Mid"){
calabration_data <- filter(data1, Site == site)[,1:22]
calibration_variables <- data.frame(cc=1, SUM=1, rmse=200000)  # this is dummy value, that is why rmse is so high
for(i in 1:10000) {
cc <-  runif(1,0.5,1)
SUM <- runif(1,0.4,0.7)
calabration_data <- calabration_data %>%
mutate(HP_Interception = SUM * HP_I_max * (1-exp(-cc * `sprec open (mm)` / HP_I_max)))
calabration_data %>% summarise(rmse(HP_Interception, `Canopy Interception (mm)`))
calibration_variables <- rbind(calibration_variables,
data.frame(cc=cc,SUM=SUM,rmse=as.numeric(calabration_data %>% summarise(rmse(HP_Interception, `Canopy Interception (mm)`)))))
}
# Finding the "f" varibale with the lowest RMSE
best_value <- filter(calibration_variables, rmse == min(calibration_variables$rmse))
# Return the best f value
return(best_value)
}
Model_Preformance[1,5:7] <- round(cc_SUM_calibration(data1=daily_storm_data, site = "High"),digits=3)
Model_Preformance[2,5:7] <- round(cc_SUM_calibration(data1=daily_storm_data, site = "Mid"),digits=3)
Model_Preformance[3,5:7] <- round(cc_SUM_calibration(data1=daily_storm_data, site = "Low"),digits=3)
# Running the model with the best fit for
final_storm_data <- daily_storm_data[,1:22] %>%
mutate(calibrated_cc = ifelse(Site == "High",Model_Preformance$cc_calibrated[1],
ifelse(Site == "Mid",Model_Preformance$cc_calibrated[2],
ifelse(Site == "Low",Model_Preformance$cc_calibrated[3],NA))))  %>%
mutate(calibrated_SUM = ifelse(Site == "High",Model_Preformance$SUM_calibrated[1],
ifelse(Site == "Mid",Model_Preformance$SUM_calibrated[2],
ifelse(Site == "Low",Model_Preformance$SUM_calibrated[3],NA)))) %>%
mutate(HP_Interception = calibrated_SUM * HP_I_max * (1-exp(-calibrated_cc * `sprec open (mm)` / HP_I_max)))
ggplotly(ggplot(data=filter(final_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_Interception,col="Modeled Interception"))+
ggtitle("Calabrated HP Model Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
theme_cowplot(12))+
theme(legend.position = "none")
Model_Preformance[4,7] <- final_storm_data %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=3))
Model_Preformance[,7] <- round(Model_Preformance[,7], digits = 2)
###############################################################################################################
# Model Bias
final_storm_data <- final_storm_data %>%
mutate(`model bias (mm)` = HP_Interception-`Canopy Interception (mm)`)
ggplot(data=final_storm_data)+
geom_point(aes(`sprec open (mm)`,`model bias (mm)`,col=`Mean Air Temperature (c)`))+
ggtitle("Model Bias, HP Model") + xlab("Precip (mm)") + ylab ("Bias (mm)")+
scale_color_gradient(limits=c(-10,5))+
labs(col = "T air (c)")+
theme_cowplot(12)
ggplot(data=filter(final_storm_data, `Mean Air Temperature (c)` >=0 ))+
geom_point(aes(`sprec open (mm)`,`model bias (mm)`,col=`Mean Air Temperature (c)`))+
ggtitle("Model Bias, HP Model") + xlab("Precip (mm)") + ylab ("Bias (mm)")+
ylim(-315, 200)+
scale_color_gradient(limits=c(-10,5))+
labs(col = "T air (c)")+
theme_cowplot(12)
nrow(filter(final_storm_data,`Mean Air Temperature (c)` >=0 ))
nrow(filter(final_storm_data,`Mean Air Temperature (c)` >=0 & `model bias (mm)` < 0 ))
###############################################################################################################
# Pairs Plot
# pairs(final_storm_data[,c(3,5,6,11,12,14,17,25,26)])
###############################################################################################################
HP_final <- final_storm_data
ggplot(data=filter(final_storm_data, `Mean Air Temperature (c)` >=0 ))+
geom_point(aes(`sprec open (mm)`,`model bias (mm)`,col=`Mean Air Temperature (c)`))+
ggtitle("Model Bias, HP Model") + xlab("Precip (mm)") + ylab ("Bias (mm)")+
ylim(-315, 200)+
scale_color_gradient(limits=c(-10,5))+
labs(col = "T air (c)")+
theme_cowplot(12)
###############################################################################################################
# Uncalabrated Plot
ggplot(data=filter(daily_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_Interception,col="Modeled Interception"))+
ggtitle("Uncalibrated HP Model, Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
ylim(0, 1000)+
theme_cowplot(12)+
theme(legend.position = "none")
################################################################################################
# Andreadis et al. (2009) Snow Inteception Model, using the storm data from the ForEST Data Set
#
# This code aims to recreate the model results from Storck (2009) and compare the
# result to a measured canopy interception efficenty (CIE) explained in Roth & Nolin (2019)
#
#
# Code written by Mikey Johnson, mikeyj@nevada.unr.edu
#
# last eddited November 11, 2019
#
#
###############################################################################################
# Loading Pakages
library(lubridate)  # date time manipulation
library(dplyr)      # data manipulation
library(ggplot2)    # plotting
library(cowplot)    # publication-ready plots
library(plotly)     # interactive plotting
library(hydroGOF)   # Hydrology Analysis, rmse
###############################################################################################
# Loading data from ForEST_snowdepth_data_clean.R
# I am assuming data is sorted by site and date
daily_storm_data <- read.csv("~/Documents/R Scripts/McKenzie Canopy Interception Model/ForEST data & code/Saved Data From Each Step/Step4_daily_storm_data.csv", row.names=1)
# cleaning names
names(daily_storm_data) <- c("Site",
"Date",
"Wind Speed (m/s)",
"Wind Direction (Deg)",
"Relative Humidity (%)",
"Mean Air Temperature (c)",
"Max Air Temperature (c)",
"Min Air Temperature (c)",
"Snow Depth (cm)",
"Depth Increas (cm)",
"New Snow Density (kg/m3)",
"sprec open (mm)",
"Storm Flag",
"stormfall intensity (mm/hr)",
"stormfall duration (hr)",
"sprec forest (mm)",
"Canopy Interception (mm)",
"CIE",
"CIE flag")
daily_storm_data <- filter(daily_storm_data,`Canopy Interception (mm)`<= 1500) #filtering really high points, I don't beleve these value to be true
daily_storm_data <- filter(daily_storm_data,`CIE flag`== 0) #filtering only my good data for now
###############################################################################################################
#Hedstorm Pameroy Model (1998)
# LAI for the High, Med, and Low sites
LAI <- c(1.1, 2.7, 2.4)
daily_storm_data <- daily_storm_data %>%
mutate(LAI = ifelse(Site == "High",LAI[1],
ifelse(Site == "Mid",LAI[2],
ifelse(Site == "Low",LAI[3],NA))))
# constants
S_bar <- 6.6  # 6.6 pine, 5.9 spruce (kg/m^2)
cc <- 1 # canopy closure coeficent (orignal vlaue 1)
snow_unloading_multiplier <- 0.679 # (orignal value 0.679)
# Max Snow Load
# I_max <- S_bar*(0.27+(46/rho_snow))*LAI #HP max canopy load
# I_HP <- 0.679 * I_max * (1-exp(-cc*P/I_max))
# Simulated_CIE
daily_storm_data <- daily_storm_data %>%
mutate(HP_rho = 67.92+51.25*exp(`Mean Air Temperature (c)`/2.59)) %>%
mutate(HP_I_max = S_bar*(0.27+(46/HP_rho))*LAI*1000) %>%
mutate(HP_Interception = snow_unloading_multiplier * HP_I_max * (1-exp(-cc * `sprec open (mm)` / HP_I_max)))
###############################################################################################################
# Uncalabrated Plot
ggplot(data=filter(daily_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_Interception,col="Modeled Interception"))+
ggtitle("Uncalibrated HP Model, Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
ylim(0, 1000)+
theme_cowplot(12)+
theme(legend.position = "none")
filter(daily_storm_data, Site == "Mid" ) %>% summarise(rmse(HP_Interception, `Canopy Interception (mm)`))
###############################################################################################################
# Model Performance Table
Model_Preformance <- data.frame(Site=c("High","Mid","Low","Total"),cc_orignal=c(1,1,1,1),SUM_orignal=c(0.679,0.679,0.679,0.679)) %>%
mutate(RMSE_original=c(filter(daily_storm_data, Site == "High" ) %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)),
filter(daily_storm_data, Site == "Mid" ) %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)),
filter(daily_storm_data, Site == "Low" ) %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)),
daily_storm_data %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=2)))) %>%
mutate(cc_calibrated=NA) %>%
mutate(SUM_calibrated=NA) %>%
mutate(RMSE_calibrated=NA)
###############################################################################################################
# Calibration, the canopy cover and snow unloading parameter "cc" and "SUM"
# runif(1000,0.1,.99)
cc_SUM_calibration <- function(data1=daily_storm_data,site="Mid"){
calabration_data <- filter(data1, Site == site)[,1:22]
calibration_variables <- data.frame(cc=1, SUM=1, rmse=200000)  # this is dummy value, that is why rmse is so high
for(i in 1:10000) {
cc <-  runif(1,0.5,1)
SUM <- runif(1,0.4,0.7)
calabration_data <- calabration_data %>%
mutate(HP_Interception = SUM * HP_I_max * (1-exp(-cc * `sprec open (mm)` / HP_I_max)))
calabration_data %>% summarise(rmse(HP_Interception, `Canopy Interception (mm)`))
calibration_variables <- rbind(calibration_variables,
data.frame(cc=cc,SUM=SUM,rmse=as.numeric(calabration_data %>% summarise(rmse(HP_Interception, `Canopy Interception (mm)`)))))
}
# Finding the "f" varibale with the lowest RMSE
best_value <- filter(calibration_variables, rmse == min(calibration_variables$rmse))
# Return the best f value
return(best_value)
}
Model_Preformance[1,5:7] <- round(cc_SUM_calibration(data1=daily_storm_data, site = "High"),digits=3)
Model_Preformance[2,5:7] <- round(cc_SUM_calibration(data1=daily_storm_data, site = "Mid"),digits=3)
Model_Preformance[3,5:7] <- round(cc_SUM_calibration(data1=daily_storm_data, site = "Low"),digits=3)
# Running the model with the best fit for
final_storm_data <- daily_storm_data[,1:22] %>%
mutate(calibrated_cc = ifelse(Site == "High",Model_Preformance$cc_calibrated[1],
ifelse(Site == "Mid",Model_Preformance$cc_calibrated[2],
ifelse(Site == "Low",Model_Preformance$cc_calibrated[3],NA))))  %>%
mutate(calibrated_SUM = ifelse(Site == "High",Model_Preformance$SUM_calibrated[1],
ifelse(Site == "Mid",Model_Preformance$SUM_calibrated[2],
ifelse(Site == "Low",Model_Preformance$SUM_calibrated[3],NA)))) %>%
mutate(HP_Interception = calibrated_SUM * HP_I_max * (1-exp(-calibrated_cc * `sprec open (mm)` / HP_I_max)))
ggplotly(ggplot(data=filter(final_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,HP_Interception,col="Modeled Interception"))+
ggtitle("Calabrated HP Model Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
theme_cowplot(12))+
theme(legend.position = "none")
Model_Preformance[4,7] <- final_storm_data %>% summarise(round(rmse(HP_Interception, `Canopy Interception (mm)`),digits=3))
Model_Preformance[,7] <- round(Model_Preformance[,7], digits = 2)
###############################################################################################################
# Model Bias
final_storm_data <- final_storm_data %>%
mutate(`model bias (mm)` = HP_Interception-`Canopy Interception (mm)`)
ggplot(data=final_storm_data)+
geom_point(aes(`sprec open (mm)`,`model bias (mm)`,col=`Mean Air Temperature (c)`))+
ggtitle("Model Residuals, HP Model") + xlab("Precip (mm)") + ylab ("Bias (mm)")+
scale_color_gradient(limits=c(-10,5))+
labs(col = "T air (c)")+
theme_cowplot(12)
ggplot(data=filter(final_storm_data, `Mean Air Temperature (c)` >=0 ))+
geom_point(aes(`sprec open (mm)`,`model bias (mm)`,col=`Mean Air Temperature (c)`))+
ggtitle("Model Bias, HP Model") + xlab("Precip (mm)") + ylab ("Bias (mm)")+
ylim(-315, 200)+
scale_color_gradient(limits=c(-10,5))+
labs(col = "T air (c)")+
theme_cowplot(12)
nrow(filter(final_storm_data,`Mean Air Temperature (c)` >=0 ))
nrow(filter(final_storm_data,`Mean Air Temperature (c)` >=0 & `model bias (mm)` < 0 ))
###############################################################################################################
# Pairs Plot
# pairs(final_storm_data[,c(3,5,6,11,12,14,17,25,26)])
###############################################################################################################
HP_final <- final_storm_data
################################################################################################
# Andreadis et al. (2009) Snow Inteception Model, using the storm data from the ForEST Data Set
#
# This code aims to recreate the model results from Storck (2009) and compare the
# result to a measured canopy interception efficenty (CIE) explained in Roth & Nolin (2019)
#
#
# Code written by Mikey Johnson, mikeyj@nevada.unr.edu
#
# last eddited November 11, 2019
#
#
###############################################################################################
# Loading Pakages
library(lubridate)  # date time manipulation
library(dplyr)      # data manipulation
library(ggplot2)    # plotting
library(cowplot)    # publication-ready plots
library(plotly)     # interactive plotting
library(hydroGOF)   # Hydrology Analysis, rmse
###############################################################################################
# Loading data from ForEST_snowdepth_data_clean.R
# I am assuming data is sorted by site and date
daily_storm_data <- read.csv("~/Documents/R Scripts/McKenzie Canopy Interception Model/ForEST data & code/Saved Data From Each Step/Step4_daily_storm_data.csv", row.names=1)
# cleaning names
names(daily_storm_data) <- c("Site",
"Date",
"Wind Speed (m/s)",
"Wind Direction (Deg)",
"Relative Humidity (%)",
"Mean Air Temperature (c)",
"Max Air Temperature (c)",
"Min Air Temperature (c)",
"Snow Depth (cm)",
"Depth Increas (cm)",
"New Snow Density (kg/m3)",
"sprec open (mm)",
"Storm Flag",
"stormfall intensity (mm/hr)",
"stormfall duration (hr)",
"sprec forest (mm)",
"Canopy Interception (mm)",
"CIE",
"CIE flag")
daily_storm_data <- filter(daily_storm_data,`Canopy Interception (mm)`<= 1500) #filtering really high points, I don't beleve these value to be true
daily_storm_data <- filter(daily_storm_data,`CIE flag`== 0) #filtering only my good data for now
###############################################################################################
# Andreadis, Stork (2009) Model
# LAI for the High, Med, and Low sites
LAI <- c(1.1, 2.7, 2.4)
daily_storm_data <- daily_storm_data %>%
mutate(LAI = ifelse(Site == "High",LAI[1],
ifelse(Site == "Mid",LAI[2],
ifelse(Site == "Low",LAI[3],NA))))
# Lr is a step function of temperature, equation (29)
daily_storm_data <- daily_storm_data %>%
mutate(Lr = ifelse(`Mean Air Temperature (c)` > -1,4,
ifelse(`Mean Air Temperature (c)`> -3, 1.5*`Mean Air Temperature (c)`+5.5, 1)))
# B is the max snow interception, same usits as m, equation (28)
m = 100 # max snow interception capacity, calabration term, (mm)
daily_storm_data <- daily_storm_data %>%
mutate(AS_I_max = Lr*m*LAI)
# Intercepted Snowfall, equation (27)
f <- 0.6  # efficency of snow interception
daily_storm_data <- daily_storm_data %>%
mutate(AS_Interception = f*`sprec open (mm)`) %>%
mutate(AS_Interception = ifelse(AS_Interception < AS_I_max, AS_Interception, AS_I_max))
###############################################################################################################
# Uncalabrated Plot
ggplot(data=filter(daily_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,AS_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,AS_Interception,col="Modeled Interception"))+
ggtitle("Uncalabrated AS Model, Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
theme_cowplot(12)+
theme(legend.position = "none")
filter(daily_storm_data, Site == "Mid" ) %>% summarise(rmse(AS_Interception, `Canopy Interception (mm)`))
###############################################################################################################
# Model Performance Table
Model_Preformance <- data.frame(Site=c("High","Mid","Low","Total"),f_orignal=c(0.6,0.6,0.6,0.6)) %>%
mutate(RMSE_original=c(filter(daily_storm_data, Site == "High" ) %>% summarise(round(rmse(AS_Interception, `Canopy Interception (mm)`),digits=2)),
filter(daily_storm_data, Site == "Mid" ) %>% summarise(round(rmse(AS_Interception, `Canopy Interception (mm)`),digits=2)),
filter(daily_storm_data, Site == "Low" ) %>% summarise(round(rmse(AS_Interception, `Canopy Interception (mm)`),digits=2)),
daily_storm_data %>% summarise(round(rmse(AS_Interception, `Canopy Interception (mm)`),digits=2)))) %>%
mutate(f_calibrated=NA) %>%
mutate(RMSE_calibrated=NA)
###############################################################################################################
# Calibration, the interception parameted "f"
# runif(1000,0.1,.99)
f_calibration <- function(daily_storm_data=daily_storm_data, site = "Mid"){
calibration_data <- filter(daily_storm_data, Site == site)[,1:22]
calibration_variables <- data.frame(f = seq(0.1,0.9,0.01)) %>%
mutate(rmse = NA)
for(i in 1:nrow(calibration_variables)){
calibration_data <- calibration_data %>%
mutate(AS_Interception = calibration_variables$f[i]*`sprec open (mm)`) %>%
mutate(AS_Interception = ifelse(AS_Interception < AS_I_max, AS_Interception, AS_I_max))
calibration_variables$rmse[i] <- rmse(calibration_data$AS_Interception, calibration_data$`Canopy Interception (mm)`)
}
# Finding the "f" varibale with the lowest RMSE
best_value <- filter(calibration_variables, rmse == min(calibration_variables$rmse))
# Return the best f value
return(best_value)
}
Model_Preformance[1,4:5] <- round(f_calibration(daily_storm_data=daily_storm_data, site = "High"),digits=2)
Model_Preformance[2,4:5] <- round(f_calibration(daily_storm_data=daily_storm_data, site = "Mid"),digits=2)
Model_Preformance[3,4:5] <- round(f_calibration(daily_storm_data=daily_storm_data, site = "Low"),digits=2)
# Running the model with the best fit for "f"
final_storm_data <- daily_storm_data[,1:22] %>%
mutate(calibrated_f = ifelse(Site == "High",Model_Preformance$f_calibrated[1],
ifelse(Site == "Mid",Model_Preformance$f_calibrated[2],
ifelse(Site == "Low",Model_Preformance$f_calibrated[3],NA)))) %>%
mutate(AS_Interception = calibrated_f*`sprec open (mm)`) %>%
mutate(AS_Interception = ifelse(AS_Interception < AS_I_max, AS_Interception, AS_I_max))
ggplot(data=filter(final_storm_data, Site == "Mid"))+
geom_point(aes(`Mean Air Temperature (c)`,`Canopy Interception (mm)`,col="Measured Interception"))+
geom_line(aes(`Mean Air Temperature (c)`,AS_I_max,col="Imax"))+
geom_line(aes(`Mean Air Temperature (c)`,AS_Interception,col="Modeled Interception"))+
ggtitle("Calibrated AS Model, Mid Site") + xlab("Temp C") + ylab ("Interception (mm)")+
theme_cowplot(12)+
theme(legend.position = "none")
Model_Preformance[4,5] <- final_storm_data %>% summarise(round(rmse(AS_Interception, `Canopy Interception (mm)`),digits=2))
###############################################################################################################
# Model Bias
final_storm_data <- final_storm_data %>%
mutate(`model bias (mm)` = AS_Interception-`Canopy Interception (mm)`)
ggplot(data=final_storm_data)+
geom_point(aes(`sprec open (mm)`,`model bias (mm)`,col=`Mean Air Temperature (c)`))+
ggtitle("Model Residuals, AS Model") + xlab("Precip (mm)") + ylab ("Bias (mm)")+
scale_color_gradient(limits=c(-10,5))+
labs(col = "T air (c)")+
theme_cowplot(12)
ggplot(data=filter(final_storm_data, `Mean Air Temperature (c)` >=0 ))+
geom_point(aes(`sprec open (mm)`,`model bias (mm)`,col=`Mean Air Temperature (c)`))+
ggtitle("Model Bias, AS Model") + xlab("Precip (mm)") + ylab ("Bias (mm)")+
ylim(-315, 200)+
scale_color_gradient(limits=c(-10,5))+
labs(col = "T air (c)")+
theme_cowplot(12)
nrow(filter(final_storm_data,`Mean Air Temperature (c)` >=0 ))
nrow(filter(final_storm_data,`Mean Air Temperature (c)` >=0 & `model bias (mm)` < 0 ))
###############################################################################################################
# Pairs Plot
#pairs(final_storm_data[,c(3,5,6,11,12,14,17,24,25)])
###############################################################################################################
# Comparing the AS and HP model results
AS_final <- final_storm_data
# Run this code if you run HP_interception_model.R first
#ggplot()+
#  geom_point(aes(AS_final$`Mean Air Temperature (c)`,AS_final$AS_Interception,col="AS Modele (Sticky Snow), RMSE = 55.16"),size=2)+
#  geom_point(aes(HP_final$`Mean Air Temperature (c)`,HP_final$HP_Interception,col="HP Modele (Dry Snow), RMSE = 56.82"),size=2.2)+
#  ggtitle("Modeled Interception") + xlab("Temp C") + ylab ("Interception (mm)")+
#  theme_cowplot(12)+
#  theme(legend.position = c(0.025, 0.85))+
#  labs(col = "")
# Plot of Tmax with tmeperature for both the HP and AS model
Tmax <- data.frame(Tair_c=seq(-10, 2.5, by=.5)) %>%
mutate(LAI= 2.7) %>%
mutate(rho_snow = 67.92 + 51.25*exp(Tair_c/2.99)) %>%
mutate(Imax_HP = S_bar * (0.27 + (46/rho_snow))*LAI*10) %>%
mutate(Lr = ifelse(Tair_c > -1,4,
ifelse(Tair_c > -3, 1.5 * Tair_c + 5.5, 1))) %>%
mutate(Imax_AS = 0.6 * Lr * 100)
ggplot(data=Tmax)+
geom_line(aes(Tair_c,Imax_HP,col="HP Model"))+
geom_line(aes(Tair_c,Imax_AS,col="AS Model"))+
ggtitle("Maximum Interception") + xlab("Air Temperature (Degrees C)") + ylab ("Scailed Canopy Interception (-)")+
labs(color = "")+
theme_cowplot(12)
#### Setting working directorys #############################################################
# Setting the source file location
sfl <- dirname(rstudioapi::getActiveDocumentContext()$path)  # this is the source file location of R-SnowModel.R
# Working directory for demo run of SnowModel
# ** If you have these in the correct directory they should be good to run out of the box. **
#wd <- paste(sfl,"snowmodel_test",sep="/")     # this file is the demo run of SnowModel
wd <- paste(sfl,"Singel Cell Test",sep="/")     # this file is a single cell test at Hogg Pass SNOTEL, https://wcc.sc.egov.usda.gov/nwcc/site?sitenum=526
setwd(wd)
#### Step 1: compilling and running Fortran #################################################
setwd(paste(wd,"code",sep="/"))
system("sh compile_snowmodel.script")
