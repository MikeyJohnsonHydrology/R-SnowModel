hist(bvn[,2],40)
par(mfrow=c(1,1))
############
# MCMC implementation of the Myxomatosis example from the Bolker book
############
library(emdbook)
MyxDat <- MyxoTiter_sum
Myx <- subset(MyxDat,grade==1)
head(Myx)
###########
# Visualize the Myxomatosis data for the 100th time!
hist(Myx$titer,freq=FALSE)
#########
# ... and overlay a proposed data-generating model (gamma distribution)
hist(Myx$titer,freq=FALSE)
curve(dgamma(x,shape=40,scale=0.15),add=T,col="red")
############
# Write a non-log-transformed likelihood function
GammaLikelihoodFunction <- function(params){
prod(dgamma(Myx$titer,shape=params['shape'],scale=params['scale'],log=F))
}
params <- c(shape=40,scale=0.15)
params
GammaLikelihoodFunction(params)
#############
# Function for returning the prior probability density for any point in parameter space
GammaPriorFunction <- function(params){
prior <- c(shape=NA,scale=NA)
prior['shape'] <- dgamma(params['shape'],shape=0.01,scale=100)
prior['scale'] <- dgamma(params['scale'],shape=0.001,scale=1000)
# prior['shape'] <- dunif(params['shape'],3,100)        # alternative: could use uniform prior!
# prior['scale'] <- dunif(params['scale'],0.01,0.5)
return(prod(prior))
}
curve(dgamma(x,shape=0.01,scale=1000),3,100)
params <- c(shape=40,scale=0.15)
params
GammaPriorFunction(params)
############
# Function for computing the ratio of posterior densities between any two points in parameter space
PosteriorRatio <- function(oldguess,newguess){
oldLik <- max(1e-90,GammaLikelihoodFunction(oldguess))   # compute likelihood and prior density at old guess
oldPrior <- max(1e-90,GammaPriorFunction(oldguess))
newLik <- GammaLikelihoodFunction(newguess)             # compute likelihood and prior density at new guess
newPrior <- GammaPriorFunction(newguess)
return((newLik*newPrior)/(oldLik*oldPrior))          # compute ratio of weighted likelihoods
}
oldguess <- params
newguess <- c(shape=39,scale=0.15)
PosteriorRatio(oldguess,newguess)
############
# Define proposal distribution for jumps in parameter space (use normal distribution)!
# function for making new guesses
newGuess <- function(oldguess){
sdshapejump <- 4
sdscalejump <- 0.07
jump <- c(shape=rnorm(1,mean=0,sd=sdshapejump),scale=rnorm(1,0,sdscalejump))
newguess <- abs(oldguess + jump)
return(newguess)
}
# set a new "guess" near to the original guess
newGuess(oldguess=params)
newGuess(oldguess=params)
newGuess(oldguess=params)
##########
# Set a starting point in parameter spacer
startingvals <- c(shape=75,scale=0.28)    # starting point for the algorithm
###########
# Try our new functions
newguess <- newGuess(startingvals)    # take a jump in parameter space
newguess
PosteriorRatio(startingvals,newguess)   # difference in posterior ratio
###############
# Visualize the Metropolis-Hastings routine:
chain.length <- 10
oldguess <- startingvals
guesses <- matrix(0,nrow=chain.length,ncol=2)
colnames(guesses) <- names(startingvals)
counter <- 1
while(counter <= chain.length){
newguess <- newGuess(oldguess)
post.rat <- PosteriorRatio(oldguess,newguess)
prob.accept <- min(1,post.rat)
rand <- runif(1)
if(rand<=prob.accept){
oldguess <- newguess
guesses[counter,] <- newguess
counter=counter+1
}
}
# visualize!
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
##########
# Get more MCMC samples
chain.length <- 100
oldguess <- startingvals
guesses <- matrix(0,nrow=chain.length,ncol=2)
colnames(guesses) <- names(startingvals)
counter <- 1
while(counter <= chain.length){
newguess <- newGuess(oldguess)
post.rat <- PosteriorRatio(oldguess,newguess)
prob.accept <- min(1,post.rat)
rand <- runif(1)
if(rand<=prob.accept){
oldguess <- newguess
guesses[counter,] <- newguess
counter=counter+1
}
}
# visualize!
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
############
# And more...
chain.length <- 1000
oldguess <- startingvals
guesses <- matrix(0,nrow=chain.length,ncol=2)
colnames(guesses) <- names(startingvals)
counter <- 1
while(counter <= chain.length){
newguess <- newGuess(oldguess)
post.rat <- PosteriorRatio(oldguess,newguess)
prob.accept <- min(1,post.rat)
rand <- runif(1)
if(rand<=prob.accept){
oldguess <- newguess
guesses[counter,] <- newguess
counter=counter+1
}
}
# visualize!
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
#############
# Evaluate "traceplot" for the MCMC samples...
##### Shape parameter
plot(1:chain.length,guesses[,'shape'],type="l",main="shape parameter",xlab="iteration",ylab="shape")
###### Scale parameter
plot(1:chain.length,guesses[,'scale'],type="l",main="scale parameter",xlab="iteration",ylab="scale")
############
# Remove "burn-in" (allow MCMC routine some time to get to the posterior)
burn.in <- 100
MCMCsamples <- guesses[-c(1:burn.in),]
chain.length=chain.length-burn.in
plot(1:chain.length,MCMCsamples[,'shape'],type="l",main="shape parameter",xlab="iteration",ylab="shape")
plot(1:chain.length,MCMCsamples[,'scale'],type="l",main="scale parameter",xlab="iteration",ylab="scale")
##########
# Try again- run for much longer
chain.length <- 20000
oldguess <- startingvals
guesses <- matrix(0,nrow=chain.length,ncol=2)
colnames(guesses) <- names(startingvals)
counter <- 1
while(counter <= chain.length){
newguess <- newGuess(oldguess)
post.rat <- PosteriorRatio(oldguess,newguess)
prob.accept <- min(1,post.rat)
rand <- runif(1)
if(rand<=prob.accept){
oldguess <- newguess
guesses[counter,] <- newguess
counter=counter+1
}
}
# visualize!
image(x=shapevec,y=scalevec,z=surface2D,zlim=c(-1000,-30),col=topo.colors(12))
contour(x=shapevec,y=scalevec,z=surface2D,levels=c(-30,-40,-80,-500),add=T)
lines(guesses,col="red")
#############
# Use longer "burn-in"
burn.in <- 5000
MCMCsamples <- guesses[-c(1:burn.in),]
chain.length=chain.length-burn.in
plot(1:chain.length,MCMCsamples[,'shape'],type="l",main="shape parameter",xlab="iteration",ylab="shape")
plot(1:chain.length,MCMCsamples[,'scale'],type="l",main="scale parameter",xlab="iteration",ylab="scale")
##########
# "thin" the MCMC samples
thinnedMCMC <- MCMCsamples[seq(1,chain.length,by=10),]
plot(1:nrow(thinnedMCMC),thinnedMCMC[,'shape'],type="l",main="shape parameter",xlab="iteration",ylab="shape")
plot(1:nrow(thinnedMCMC),thinnedMCMC[,'scale'],type="l",main="scale parameter",xlab="iteration",ylab="scale")
# Visualize the posterior!
plot(density(thinnedMCMC[,'scale']),main="scale parameter",xlab="scale")
plot(density(thinnedMCMC[,'shape']),main="shape parameter",xlab="shape")
#########
# More visual posterior checks...
par(mfrow=c(3,2))
plot(thinnedMCMC,col=1:10000)
plot(thinnedMCMC,type="l")
plot(ts(thinnedMCMC[,1]))
plot(ts(thinnedMCMC[,2]))
hist(thinnedMCMC[,1],40)
hist(thinnedMCMC[,2],40)
par(mfrow=c(1,1))
#############
# Simple example of a Gibbs sampler
#############
########
# first, recall our simple bivariate normal sampler
rbvn<-function (n, rho){  #function for drawing an arbitrary number of independent samples from the bivariate standard normal distribution.
x <- rnorm(n, 0, 1)
y <- rnorm(n, rho * x, sqrt(1 - rho^2))
cbind(x, y)
}
bvn<-rbvn(10000,0.98)
par(mfrow=c(3,2))
plot(bvn,col=1:10000)
plot(bvn,type="l")
plot(ts(bvn[,1]))
plot(ts(bvn[,2]))
hist(bvn[,1],40)
hist(bvn[,2],40)
par(mfrow=c(1,1))
#############
# Now construct a Gibbs sampler alternative
gibbs<-function (n, rho){    # a gibbs sampler implementation of a bivariate random number generator
mat <- matrix(ncol = 2, nrow = n)   # matrix for storing the random samples
x <- 0
y <- 0
mat[1, ] <- c(x, y)        # initialize the markov chain
for (i in 2:n) {
x <- rnorm(1, rho * y, sqrt(1 - rho^2))        # sample from x conditional on y
y <- rnorm(1, rho * x, sqrt(1 - rho^2))        # sample from y conditional on x
mat[i, ] <- c(x, y)
}
mat
}
##########
# Test the Gibbs sampler
bvn<-gibbs(10000,0.98)
par(mfrow=c(3,2))
plot(bvn,col=1:10000)
plot(bvn,type="l")
plot(ts(bvn[,1]))
plot(ts(bvn[,2]))
hist(bvn[,1],40)
hist(bvn[,2],40)
par(mfrow=c(1,1))
###########
# Myxomatosis example in BUGS modeling language
model {
#############
# LIKELIHOOD
############
for(obs in 1:n.observations){
titer[obs] ~ dgamma(shape,rate)
}
#############
# PRIORS
############
shape ~ dgamma(0.001,0.001)
scale ~ dgamma(0.01,0.01)
rate <- 1/scale   # convert the scale parameter to a "rate" for BUGS
}
##########
# Write the BUGS model to file
cat("
model {
#############
# LIKELIHOOD
############
for(obs in 1:n.observations){
titer[obs] ~ dgamma(shape,rate)
}
#############
# PRIORS
############
shape ~ dgamma(0.001,0.001)
scale ~ dgamma(0.01,0.01)
rate <- 1/scale
}
", file="BUGSmodel.txt")
############
# Encapsulate the data into a single "list" object
myx.data.for.bugs <- list(
titer = Myx$titer,
n.observations = length(Myx$titer)
)
myx.data.for.bugs
###########
# Function for generating random initial values for all free parameters
init.vals.for.bugs <- function(){
init.list <- list(
shape=runif(1,20,100),
scale=runif(1,0.05,0.3)
)
return(init.list)
}
init.vals.for.bugs()
init.vals.for.bugs()
init.vals.for.bugs()
###########
# Run JAGS!!!!
##########
library(R2jags)
library(coda)
params.to.store <- c("shape","scale")
jags.fit <- jags(data=myx.data.for.bugs,inits=init.vals.for.bugs,parameters.to.save=params.to.store,n.iter=5000,model.file="BUGSmodel.txt",n.chains = 3,n.burnin = 0 )
jagsfit.mcmc <- as.mcmc(jags.fit)   # convert to "MCMC" object (coda package)
summary(jagsfit.mcmc)
plot(jagsfit.mcmc)
################
# Run the chains for longer!
jags.fit <- jags(data=myx.data.for.bugs,inits=init.vals.for.bugs,parameters.to.save=params.to.store,n.iter=50000,model.file="BUGSmodel.txt",n.chains = 3, n.burnin=10000,n.thin = 20)
jagsfit.mcmc <- as.mcmc(jags.fit)   # convert to "MCMC" object (coda package)
summary(jagsfit.mcmc)
plot(jagsfit.mcmc)
##############
# Run convergence diagnostics
gelman.diag(jagsfit.mcmc)
# Note this is a huge file
week1_transects <- read.csv("~/Desktop/UNR/1st Smester, Fall 2018/NRES 746, Advanced Analysis/Student Lead Topic, Accounting for spatial autocorrelation/Snow EX Data/2017.02.08/SnowEx17_GPR_Week1_transects.txt")
head(week1_transects)
tail(week1_transects)
snow_depth <- week1_transects[,7]
lat <- week1_transects[,4]
long <-week1_transects[,3]
plot(long[1:1000],lat[1:1000]) # Plotting the part of a transect
plot(long,lat) # This might take a while to generate
# Looking at Normal distrobution of snow depth
hist(snow_depth)
t.test(snow_depth)
# Dividing data by transect
transect46 = week1_transects[which(week1_transects$TRANSECT == 46),]
transect1 = week1_transects[which(week1_transects$TRANSECT == 1),]
#Building a matrix of semivariogram bata for transect #1
library(geosphere)
ed <- vector(mode="numeric", length=length(transect1$TRACE))
semivar <- vector(mode="numeric", length=length(transect1$TRACE))
i <- 1
for( j in 1:length(transect1$TRACE)) {
ed[j] <- distm(c(transect1$LONG[i], transect1$LAT[i]), c(transect1$LONG[j], transect1$LAT[j]), fun = distHaversine) # euclidean distance [meters]
semivar[j] <- (snow_depth[i]-snow_depth[j])^2 # semivariogram
}
plot(ed,semivar)
install.packages("ape")
install.packages("glmmTMB")
90.62+26.56+52+155.68+209.2+57.84+240
90.62+26.56+52+155.68+209.2+57.84+240
90.62 + 26.56 + 52 + 155.68 + 209.20 + 57.84 + 240
831.90/3
155.68/3
clc
c
90.62 + 26.56 + 52 + 155.68 + 209.20 + 57.84 + 240
90.62 + 26.56 + 52 + 155.68 + 209.20 + 57.84 + 240
90.62 + 26.56 + 52 + 209.20 + 57.84
/3
436.22/3
1410-928
482/1410
3.14/144
3.14/2^2/144
dat.1 <- "Title"
dat.2 <- "Notes"
df.1 <- c(1:3)
df.2 <- matrix(1:9, nrow=3, byrow=TRUE)
df.1
install.packages("readgrads")
13/5/15
13.5/15
# Select the start date of the model run
startdate=[2014,9,1];
# Select the start date of the model run
startdate=c(2014,9,1);
nasa
install.packages("tbl_cube")
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
nasa
view (nasa)
nasa
select(nasa, cloudhigh:cloudmid)
select(nasa, matches("temp"))
n.col = 1121
n.row = 759
llx = 489747 # utm, zone 10, (m)
lly = 4853924 # utm 10, zone 10, (m)
cellsize = 100 # (m)
poi.east = 591144     #utm, zone 10, (m)
poi.north = 4919499   #utm, zone 10, (m)
x.cell = (poi.east-llx)/cellsize
y.cell = (poi.east-llx)/cellsize
x.cell = floor((poi.east-llx)/cellsize)
y.cell = floor((poi.east-llx)/cellsize)
poi <= c(591144,4919499)
poi <- c(591144,4919499)
poi[1]
poi[2]
cell.find <- function(poi = c(591144,4919499),
n.col = 1121,
n.row = 759,
llx = 489747, # utm, zone 10, (m)
lly = 4853924, # utm 10, zone 10, (m)
cellsize = 100, # (m)
) {
poi.east <- poi[1]     #utm, zone 10, (m)
poi.north <- poi[2]    #utm, zone 10, (m)
x.cell <- floor((poi.east-llx)/cellsize)
y.cell <- floor((poi.north-lly)/cellsize)
cell <- c(x.cell,y.cell)
return(cell)
}
cell.find <- function(poi = c(591144,4919499),
n.col = 1121,
n.row = 759,
llx = 489747, # utm, zone 10, (m)
lly = 4853924, # utm 10, zone 10, (m)
cellsize = 100, # (m)
)
{
poi.east <- poi[1]     #utm, zone 10, (m)
poi.north <- poi[2]    #utm, zone 10, (m)
x.cell <- floor((poi.east-llx)/cellsize)
y.cell <- floor((poi.north-lly)/cellsize)
cell <- c(x.cell,y.cell)
return(cell)
}
cell.find <- function(poi = c(591144,4919499),
n.col = 1121,
n.row = 759,
llx = 489747, # utm, zone 10, (m)
lly = 4853924, # utm 10, zone 10, (m)
cellsize = 100 # (m)
)
{
poi.east <- poi[1]     #utm, zone 10, (m)
poi.north <- poi[2]    #utm, zone 10, (m)
x.cell <- floor((poi.east-llx)/cellsize)
y.cell <- floor((poi.north-lly)/cellsize)
cell <- c(x.cell,y.cell)
return(cell)
}
McKenzie.utm10 <- c(c(591144,4919499))
McKenzie.cell <- cell.find(poi)
cell.find <- function(poi = c(591144,4919499),
n.col = 1121,
n.row = 759,
llx = 489747, # utm, zone 10, (m)
lly = 4853924, # utm 10, zone 10, (m)
cellsize = 100 # (m)
)
{
poi.east <- poi[1]     #utm, zone 10, (m)
poi.north <- poi[2]    #utm, zone 10, (m)
x.cell <- floor((poi.east-llx)/cellsize)
y.cell <- floor((poi.north-lly)/cellsize)
cell <- c(x.cell,y.cell)
return(cell)
}
McKenzie.utm10 <- c(c(591144,4919499))
McKenzie.cell <- cell.find(poi)
McKenzie.cell <- cell.find(McKenzie)
McKenzie.cell <- cell.find(McKenzie.utm10)
cell.find <- function(poi = c(591144,4919499),
n.col = 1121,
n.row = 759,
llx = 489747, # utm, zone 10, (m)
lly = 4853924, # utm 10, zone 10, (m)
cellsize = 100 # (m)
)
{
poi.east <- poi[1]     #utm, zone 10, (m)
poi.north <- poi[2]    #utm, zone 10, (m)
x.cell <- floor((poi.east-llx)/cellsize)
y.cell <- floor((poi.north-lly)/cellsize)
cell <- c(x.cell,y.cell)
return(cell)
}
Hogg.Pass.utm10 <- c(591144,4919499)
Hogg.Pass.cell <- cell.find(Hogg.Pass.utm10)
McKenzie.utm10 <- c(590047,4895863)
McKenzie.cell <- cell.find(McKenzie.utm10)
Roaring.River.utm10 <- c(577844,4861120)
Roaring.River.cell <- cell.find(Roaring.River.utm10)
install.packages("grads")
set.seed(8675309)
set.seed(8675309)
m <- matrix(rnorm(25),nrow = 5, ncol = 5)
df <- ad.data.frame(m)
df <- as.data.frame(m)
names(df) <- c("age","height","weight","measure1","measure2")
df[1,]
df[,1]
df$age
smallerdf <- df[,c("age","height")]
evansmallerdf <-smallerdf[smallerdf$age < 1,]
View(evansmallerdf)
View(smallerdf)
smallerdf$age < 1
View(evansmallerdf)
View(smallerdf)
##################################################################################################
### SnowModel Run Script, by Mikey Johnson May 3, 2019
### this script was developed to make a full SnowModel run
### step will require you to set some varibles depending on how you want to run the model
###
###
##################################################################################################
# Setting the working directory
wd <- "~/Desktop/snowmodel_16_05_09"   # this is the file of the current snowmodel run
setwd(wd)
#### Step 1: compilling and running Fortran #############################################
setwd(paste(wd,"code",sep="/"))
system("sh compile_snowmodel.script")
setwd(wd)
system("./snowmodel")
#### Step 2: reading the GrADS file #####################################################
#### Step 3: selecting the data of intrest ##############################################
